definitions:
  categorydto.CreateCategoryDTO:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.ArrayOfIdDTO:
    properties:
      ids:
        description: Optional list of category IDs
        items:
          type: string
        type: array
    type: object
  productdto.CreateProductDTO:
    properties:
      categoryID:
        type: string
      coverPhoto:
        maximum: 5
        minimum: 1
        type: integer
      name:
        type: string
      price:
        minimum: 1
        type: integer
      stock:
        minimum: 0
        type: integer
      variants:
        items:
          $ref: '#/definitions/productdto.ProductVariantDTO'
        type: array
    required:
    - categoryID
    - coverPhoto
    - name
    type: object
  productdto.ProductVariantDTO:
    properties:
      name:
        type: string
      price:
        minimum: 1
        type: integer
      stock:
        minimum: 0
        type: integer
    required:
    - name
    - price
    - stock
    type: object
  productdto.UpdateProductDTO:
    properties:
      categoryID:
        type: string
      coverPhoto:
        maximum: 5
        minimum: 1
        type: integer
      name:
        type: string
      price:
        minimum: 1
        type: integer
      stock:
        minimum: 0
        type: integer
      variants:
        items:
          $ref: '#/definitions/productdto.ProductVariantDTO'
        type: array
    required:
    - categoryID
    - coverPhoto
    - name
    type: object
  productdto.UpdateProductStockDTO:
    properties:
      stock:
        minimum: 0
        type: integer
      variants:
        type: string
    required:
    - stock
    type: object
  questionerdto.CreateQuestionerDTO:
    properties:
      instagram:
        type: string
      name:
        type: string
      questioner1:
        maximum: 5
        minimum: 1
        type: integer
      questioner2:
        maximum: 5
        minimum: 1
        type: integer
      questioner3:
        maximum: 5
        minimum: 1
        type: integer
      questioner4:
        maximum: 5
        minimum: 1
        type: integer
      questioner5:
        maximum: 5
        minimum: 1
        type: integer
      questioner6:
        maximum: 5
        minimum: 1
        type: integer
      questioner7:
        maximum: 5
        minimum: 1
        type: integer
      questioner8:
        maximum: 5
        minimum: 1
        type: integer
      questioner9:
        maximum: 5
        minimum: 1
        type: integer
      questioner10:
        maximum: 5
        minimum: 1
        type: integer
    required:
    - questioner1
    - questioner10
    - questioner2
    - questioner3
    - questioner4
    - questioner5
    - questioner6
    - questioner7
    - questioner8
    - questioner9
    type: object
  transactiondto.CreateTransactionAttrDTO:
    properties:
      productID:
        type: string
      quantity:
        minimum: 1
        type: integer
      variantName:
        type: string
    required:
    - productID
    - quantity
    type: object
  transactiondto.CreateTransactionDTO:
    properties:
      data:
        items:
          $ref: '#/definitions/transactiondto.CreateTransactionAttrDTO'
        type: array
    required:
    - data
    type: object
  userdto.LoginUserDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  userdto.RegisterUserDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      phoneNumber:
        type: string
      storeID:
        type: string
    required:
    - email
    - name
    - password
    - storeID
    type: object
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Example API
  version: "1.0"
paths:
  /api/category:
    delete:
      description: Bulk Delete Categories
      parameters:
      - description: Payload to bulk delete
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.ArrayOfIdDTO'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Bulk Delete Categories
      tags:
      - Category
    get:
      description: Get Category Option
      parameters:
      - in: query
        name: isAvailable
        type: boolean
      - in: query
        minimum: 0
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: page
        type: integer
      - in: query
        name: search
        type: string
      - in: query
        name: sortBy
        type: string
      - in: query
        name: sortOrder
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get Category Option
      tags:
      - Category
    post:
      description: Create Category
      parameters:
      - description: Payload to create
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/categorydto.CreateCategoryDTO'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Create Category
      tags:
      - Category
  /api/category/{categoryId}:
    put:
      description: Update Category
      parameters:
      - description: Category ID
        in: path
        name: categoryId
        required: true
        type: string
      - description: Payload to update
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/categorydto.CreateCategoryDTO'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update Category
      tags:
      - Category
  /api/export-all:
    get:
      description: Export All Database
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Export Database
      tags:
      - Export
  /api/product:
    delete:
      description: Bulk Delete Products
      parameters:
      - description: Payload to bulk delete
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.ArrayOfIdDTO'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Bulk Delete Products
      tags:
      - Product
    get:
      description: Get Products list
      parameters:
      - in: query
        name: isAvailable
        type: boolean
      - in: query
        minimum: 0
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: page
        type: integer
      - in: query
        name: search
        type: string
      - in: query
        name: sortBy
        type: string
      - in: query
        name: sortOrder
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get Products list
      tags:
      - Product
    post:
      description: Create Product
      parameters:
      - description: Payload to create
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/productdto.CreateProductDTO'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Create Product
      tags:
      - Product
  /api/product/{productId}:
    get:
      description: Get Product Detail
      parameters:
      - description: product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get Product Detail
      tags:
      - Product
    put:
      description: Update Products
      parameters:
      - description: product ID
        in: path
        name: productId
        required: true
        type: string
      - description: Payload to update
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/productdto.UpdateProductDTO'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update Products
      tags:
      - Product
  /api/product/{productId}/stock:
    put:
      description: Update Products Stock
      parameters:
      - description: product ID
        in: path
        name: productId
        required: true
        type: string
      - description: Payload to update stock
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/productdto.UpdateProductStockDTO'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update Products Stock
      tags:
      - Product
  /api/product/export-photos:
    get:
      description: Export All Product Photos
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Export All Product Photos
      tags:
      - Export
  /api/questioner:
    get:
      description: Get Questioner
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get Questioner
      tags:
      - Questioner
    post:
      description: Create Questioner
      parameters:
      - description: Payload to create
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/questionerdto.CreateQuestionerDTO'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Create Questioner
      tags:
      - Questioner
  /api/questioner/{questionerId}:
    get:
      description: Get Questioner Detail
      parameters:
      - description: questioner ID
        in: path
        name: questionerId
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get Questioner Detail
      tags:
      - Questioner
  /api/questioner/credits:
    get:
      description: Get Credits list
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get Credits list
      tags:
      - Questioner
  /api/questioner/stats:
    get:
      description: Get Questioner Detail Stats
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get Questioner Detail Stats
      tags:
      - Questioner
  /api/transaction:
    get:
      description: Get Transaction list
      parameters:
      - in: query
        name: isAvailable
        type: boolean
      - in: query
        minimum: 0
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: page
        type: integer
      - in: query
        name: search
        type: string
      - in: query
        name: sortBy
        type: string
      - in: query
        name: sortOrder
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get Transaction list
      tags:
      - Transaction
    post:
      description: Create Transaction
      parameters:
      - description: Payload to create
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/transactiondto.CreateTransactionDTO'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Create Transaction
      tags:
      - Transaction
  /api/transaction/summary:
    get:
      description: Get Summary list
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get Summary list
      tags:
      - Transaction
  /api/user/login:
    post:
      description: Login User
      parameters:
      - description: Payload to login
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/userdto.LoginUserDTO'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Login User
      tags:
      - User
  /api/user/register:
    post:
      description: Register User
      parameters:
      - description: Payload to create
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/userdto.RegisterUserDTO'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Register User
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
